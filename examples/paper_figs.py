"""Script to plot the figures generated by PESST in doi:XXX"""

import os
import copy

import numpy as np
# import pandas as pd
import matplotlib as mpl
from matplotlib import pyplot as plt
import seaborn as sns

from pesst.evolution import pesst
from pesst.plotting import plot_evolution, plot_stability_distributions  #, plot_stability_histograms
from pesst.dataio import create_output_folders, load_history, load_settings, load_stability_table
# from pesst.extras.fasta import process_fasta


rerun = True  # Flag to regenerate data

colours = {
    "aa_0": "#b2df8a",  # "#fdbf6f",
    "aa_0_mu": "#33a02c",  # "#ff7f00",
    "aa_g": "#a6cee3",
    "aa_g_mu": "#1f78b4",
    "phi": "#9b59b6",
    "phi_0_mu": "#fb9a99",
    "phi_mu": "#34495e",
    "epsilon": "#fdbf6f",  # "#ff7f00",  # "#33a02c",
    "omega": "#e74c3c"
    }

sns.set_context("paper", font_scale=1.2, rc={"lines.linewidth": 2})

print(os.getcwd())
# results_dir = os.path.join(os.pardir, "pesst", "results")
results_dir = os.path.abspath(os.path.join(os.path.dirname(os.path.dirname(__file__)), "results"))
print(f"Loading results from {results_dir}...")
figures_dir = os.path.join(results_dir, "paper", "figures")
os.makedirs(figures_dir, exist_ok=True)
print(f"Saving figures to {figures_dir}...")


# Figure 1
if rerun:
    params = {
        'n_generations': 5000,
        # 'stability_start': 'high',
        'omega': np.inf,
        'distributions': 'Tokuriki',  # [{'mu': 0.54, 'sigma': 0.98, 'skew': 0, 'proportion': 0.53}, {'mu': 2.05, 'sigma': 1.91, 'skew': 0, 'proportion': 0.47}],
        'n_clones': 52,
        'clone_size': 100,
        'mutation_rate': 0.002,
        'p_invariant': 0.1,
        'death_rate': 0.05,
        'n_roots': 4,
        # 'seed': 88340051,
        'gamma_kwargs': {'shape': 1.9, 'scale': 1/1.9, 'iterations': 50, 'samples': 10000},
        'record_kwargs': {'rate': 500, 'fasta_rate': 500, 'statistics': True, 'histograms': True, 'data': True, 'figures': False, 'gif': True, 'gif_rate': 0.25}
    }

# A: stability_start = 'high'
data_path_high = os.path.join(results_dir, "20-04-24-17-23 Fig1A rep1")
out_paths_high = create_output_folders(data_path_high, write_to_disk=False)
p_high = load_settings(os.path.join(data_path_high, "initial", "settings.json"))
stability_high = load_stability_table(os.path.join(data_path_high, "initial", "stability_table.csv"))
if rerun:
    p_high = copy.deepcopy(params)
    p_high.update({'stability_start': 'high', 'seed': 88340051})
    print(p_high)
    new_data_path_high = os.path.join(results_dir, "paper", "high")
    # new_out_paths_high = create_output_folders(data_path_high, write_to_disk=True)
    (history_high, new_out_paths_high) = pesst(**p_high, output_dir=new_data_path_high)
else:
    (history_high, generations_high) = load_history(data_path_high)


# B: stability_start = 'mid'
data_path_mid = os.path.join(results_dir, "20-04-24-20-38 Fig1B rep1")
out_paths_mid = create_output_folders(data_path_mid, write_to_disk=False)
# (history_mid, generations_mid) = load_history(data_path_mid)
p_mid = load_settings(os.path.join(data_path_mid, "initial", "settings.json"))
stability_mid = load_stability_table(os.path.join(data_path_mid, "initial", "stability_table.csv"))
if rerun:
    p_mid = copy.deepcopy(params)
    p_mid.update({'stability_start': 'mid', 'seed': 3582916783})
    print(p_mid)
    new_data_path_mid = os.path.join(results_dir, "paper", "mid")
    (history_mid, new_out_paths_mid) = pesst(**p_mid, output_dir=new_data_path_mid)
else:
    (history_mid, generations_mid) = load_history(data_path_mid)


# C: stability_start = 'low'
data_path_low = os.path.join(results_dir, "20-04-24-21-25 Fig1C rep1")
out_paths_low = create_output_folders(data_path_low, write_to_disk=False)
# (history_low, generations_low) = load_history(data_path_low)
p_low = load_settings(os.path.join(data_path_low, "initial", "settings.json"))
stability_low = load_stability_table(os.path.join(data_path_low, "initial", "stability_table.csv"))
if rerun:
    p_low = copy.deepcopy(params)
    p_low.update({'stability_start': 'low', 'seed': 571460824})
    print(p_low)
    new_data_path_low = os.path.join(results_dir, "paper", "low")
    (history_low, new_out_paths_low) = pesst(**p_low, output_dir=new_data_path_low)
else:
    (history_low, generations_low) = load_history(data_path_low)


# fig = plt.figure(figsize=(14, 8))  # (width, height)
# gs = mpl.gridspec.GridSpec(nrows=3, ncols=2,
#                            # [Left, Middle, Right]
#                         #    width_ratios=[1, 0.333]) #,
#                            width_ratios=[2, 1])
#                         #    height_ratios=[2, 2])  #  [Top, Bottom]



# fig = plt.figure(figsize=(14, 8), constrained_layout=True)
# axd = fig.subplot_mosaic(
#     [
#         ["trace_high", "hist_high"],
#         ["trace_mid", "hist_mid"],
#         ["trace_low", "hist_low"]
#     ],
#     gridspec_kw={
#         # set the height ratios between the rows
#         # "height_ratios": [3, 1],
#         # set the width ratios between the columns
#         "width_ratios": [2, 1],
#     },
#     sharex=False, sharey=False,
# )
# identify_axes(axd)


# print(history_high)

axd = {}
# axd["trace_low"] = plt.subplot(gs[2, 0])
# axd["hist_low"] = plt.subplot(gs[2, 1])
# axd["trace_mid"] = plt.subplot(gs[1, 0], sharex=axd["trace_low"])
# axd["hist_mid"] = plt.subplot(gs[1, 1], sharex=axd["hist_low"])
# axd["trace_high"] = plt.subplot(gs[0, 0], sharex=axd["trace_low"])
# axd["hist_high"] = plt.subplot(gs[0, 1], sharex=axd["hist_low"])

fig, axes = plt.subplots(nrows=3, ncols=2, sharex='col',
                         squeeze=True, gridspec_kw={"width_ratios": [2, 1], 'wspace': 0.2, 'hspace': 0.25},
                         figsize=(14, 13))
# print(axes)

[[axd["trace_low"], axd["hist_low"]],
 [axd["trace_mid"], axd["hist_mid"]],
 [axd["trace_high"], axd["hist_high"]]] = axes


# TODO: Rerun simulations and save output every generation
# NOTE: When proteins are killed, they are replaced in situ making it look like their stability recovered - should they be plotted as separate lines?

# if fid % ncols == 0:  #  First column
#     x = -0.15
# else:
#     x = -0.05
# ax.text(x, 1.1, string.ascii_uppercase[fid],
#         transform=ax.transAxes, size=16, weight='bold')

x_offset, y_offset = -0.1, 1.05
subfig_font = 18
density_cap = None
alpha = 0.5

plot_omega, plot_epsilon = False, True  # See evolution.py L798-812
plot_evolution(history_high, stability_high, p_high["omega"], plot_omega, plot_epsilon,
               out_paths_high, fig_title=False, legend_title=None, legend_loc="lower right", xlims=None,
               colours=None, ax=axd["trace_high"])
# axd["trace_high"].set_xlabel(None)
axd["trace_high"].text(x_offset, y_offset, "E", transform=axd["trace_high"].transAxes, size=subfig_font, weight="bold")

# Initial distribution
# sns.histplot(history_high[0].stabilities.ravel(),
#              color=colours['aa_0'], alpha=0.8,
#              stat='density', ax=axd["hist_high"])
#             #  label="\n".join([r"$\epsilon$ distribution", stats_0]))
# # Present
# plot_stability_histograms(p_high["n_generations"], history_high[-1].stabilities, stability_high,  # omega,
#                           out_paths_high, orient='vertical', density_cap=density_cap,
#                           colours=None, ax=axd["hist_high"])
plot_stability_distributions(p_high["n_generations"], history_high[p_high["n_generations"]].stabilities, stability_high.values,
                             initial_stabilities=history_high[0].stabilities,
                             alpha=alpha, density_cap=density_cap, colours=None, ax=axd["hist_high"])

# axd["hist_high"].set_xlim([-10, 10])
axd["hist_high"].text(2*x_offset, y_offset, "F", transform=axd["hist_high"].transAxes, size=subfig_font, weight="bold")


plot_evolution(history_mid, stability_mid, p_mid["omega"], plot_omega, plot_epsilon,
               out_paths_mid, fig_title=False, legend_title=None, xlims=None,
               colours=None, ax=axd["trace_mid"])
axd["trace_mid"].set_xlabel(None)
axd["trace_mid"].text(x_offset, y_offset, "C", transform=axd["trace_mid"].transAxes, size=subfig_font, weight="bold")

# Initial distribution
# sns.histplot(history_mid[0].stabilities.ravel(),
#              color=colours['aa_0'], alpha=0.8,
#              stat='density', ax=axd["hist_mid"])
# plot_stability_histograms(p_mid["n_generations"], history_mid[-1].stabilities, stability_mid,  # omega,
#                           out_paths_mid, orient='vertical', density_cap=density_cap,
#                           colours=None, ax=axd["hist_mid"])
plot_stability_distributions(p_mid["n_generations"], history_mid[p_mid["n_generations"]].stabilities, stability_mid.values,
                             initial_stabilities=history_mid[0].stabilities,
                             alpha=alpha, density_cap=density_cap, colours=None, ax=axd["hist_mid"])
axd["hist_mid"].text(2*x_offset, y_offset, "D", transform=axd["hist_mid"].transAxes, size=subfig_font, weight="bold")


plot_evolution(history_low, stability_low, p_low["omega"], plot_omega, plot_epsilon,
               out_paths_low, fig_title=False, legend_title=None, xlims=None,
               colours=None, ax=axd["trace_low"])
axd["trace_low"].text(x_offset, y_offset, "A", transform=axd["trace_low"].transAxes, size=subfig_font, weight="bold")
axd["trace_low"].set_xlabel(None)

# Initial distribution
# sns.histplot(history_low[0].stabilities.ravel(),
#              color=colours['aa_0'], alpha=0.8,
#              stat='density', ax=axd["hist_low"])
# plot_stability_histograms(p_low["n_generations"], history_low[-1].stabilities, stability_low,  # omega,
#                           out_paths_low, orient='vertical', density_cap=density_cap,
#                           colours=None, ax=axd["hist_low"])
plot_stability_distributions(p_low["n_generations"], history_low[p_low["n_generations"]].stabilities, stability_low.values,
                             initial_stabilities=history_low[0].stabilities,
                             alpha=alpha, density_cap=density_cap, colours=None, ax=axd["hist_low"])
axd["hist_low"].text(2*x_offset, y_offset, "B", transform=axd["hist_low"].transAxes, size=subfig_font, weight="bold")

# fig.tight_layout()
fig.savefig(os.path.join(figures_dir, "Fig1.png"), bbox_inches='tight')


# Figure 2

data_path_omega_0 = os.path.join(results_dir, "20-04-25-21-06_Fig3 rep1")
out_paths_omega_0 = create_output_folders(data_path_omega_0, write_to_disk=False)
p_omega_0 = load_settings(os.path.join(data_path_omega_0, "initial", "settings.json"))
stability_omega_0 = load_stability_table(os.path.join(data_path_omega_0, "initial", "stability_table.csv"))
if rerun:
    p_omega_0 = copy.deepcopy(params)
    p_omega_0.update({'omega': 0, 'stability_start': 'high', "seed": 3132065010})
    print(p_omega_0)
    new_data_path_omega_0 = os.path.join(results_dir, "paper", "omega_0")
    (history_omega_0, new_out_paths_omega_0) = pesst(**p_omega_0, output_dir=new_data_path_omega_0)
else:
    (history_omega_0, generations_omega_0) = load_history(data_path_omega_0)

# [{'mu': -3, 'sigma': 2.5, 'skew': 3}]
# distributions = 'Tokuriki'


fig, axes = plt.subplots(nrows=1, ncols=2,
                         # , 'hspace': 0.25
                         squeeze=True, gridspec_kw={"width_ratios": [2, 1], 'wspace': 0.2},
                         figsize=(14, 4))
axd = {}
axd["trace"], axd["hist"] = axes

plot_omega, plot_epsilon = True, True


plot_evolution(history_omega_0, stability_omega_0, p_omega_0["omega"], plot_omega, plot_epsilon,
               out_paths_omega_0, fig_title=False, legend_title=None, xlims=None,
               colours=None, ax=axd["trace"])
axd["trace"].text(x_offset, y_offset, "A",
                  transform=axd["trace"].transAxes, size=subfig_font, weight="bold")

# Initial distribution
plot_stability_distributions(p_omega_0["n_generations"], history_omega_0[p_omega_0["n_generations"]].stabilities, stability_low.values,
                             initial_stabilities=history_omega_0[0].stabilities,
                             alpha=alpha, density_cap=density_cap, colours=None, ax=axd["hist"])
axd["hist"].text(2*x_offset, y_offset, "B",
                     transform=axd["hist"].transAxes, size=subfig_font, weight="bold")

# fig.tight_layout()
fig.savefig(os.path.join(figures_dir, "Fig2.png"), bbox_inches='tight')




# output_dir = "Exp1"
# if rerun:
#     (history, out_paths) = pesst(n_generations=100, stability_start='high',
#                                  omega=omega, output_dir=output_dir)
# else:  # load data
#     (history, generations) = load_history(output_dir)
# paper_dir = os.path.join("results", "paper")
# os.makedirs(paper_dir)
# # stability_table = load_stability_table(out_paths)
# stability_table = pd.read_csv(os.path.join(out_paths["initial"], 'stability_table.csv'))
# # This is the wrong stability table!
# # TODO: Create load_data which calls load_history, load stability_table etc.
# fig, ax = plt.subplots(figsize=(12, 8))
# plot_evolution(history, stability_table, omega, plot_omega=True, plot_epsilon=True, out_paths=out_paths, ax=ax)
# ax.set_ylim(-50, 350)
# fig.savefig(os.path.join(paper_dir, "paper_high.png"))


# TODO
# settings = load_settings(out_paths)
# settings["sigma"] = 5
# settings["record"]["rate"] = 25
# (history, out_paths) = pesst(**settings)
#
# (history, out_paths) = pesst()
#
# (history, out_paths) = pesst(seed=42)

# (fig, ax_arr) = plot_stability(generation, history, stability_table, omega,
#                    plot_omega, plot_epsilon, n_generations, out_paths)
# [ax_phi, ax_evo, ax_aa_g, ax_aa_0, ax_hist] = ax_arr
# ax_phi.set_ylim()

# process_fasta()
